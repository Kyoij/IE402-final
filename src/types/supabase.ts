/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/Building": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Building.id"];
          name?: parameters["rowFilter.Building.name"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["Building"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Building */
          Building?: definitions["Building"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Building.id"];
          name?: parameters["rowFilter.Building.name"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Building.id"];
          name?: parameters["rowFilter.Building.name"];
        };
        body: {
          /** Building */
          Building?: definitions["Building"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/Floor": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Floor.id"];
          height?: parameters["rowFilter.Floor.height"];
          index?: parameters["rowFilter.Floor.index"];
          name?: parameters["rowFilter.Floor.name"];
          building_id?: parameters["rowFilter.Floor.building_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["Floor"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Floor */
          Floor?: definitions["Floor"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Floor.id"];
          height?: parameters["rowFilter.Floor.height"];
          index?: parameters["rowFilter.Floor.index"];
          name?: parameters["rowFilter.Floor.name"];
          building_id?: parameters["rowFilter.Floor.building_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Floor.id"];
          height?: parameters["rowFilter.Floor.height"];
          index?: parameters["rowFilter.Floor.index"];
          name?: parameters["rowFilter.Floor.name"];
          building_id?: parameters["rowFilter.Floor.building_id"];
        };
        body: {
          /** Floor */
          Floor?: definitions["Floor"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/Point": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Point.id"];
          longitude?: parameters["rowFilter.Point.longitude"];
          latitude?: parameters["rowFilter.Point.latitude"];
          floor_id?: parameters["rowFilter.Point.floor_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["Point"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Point */
          Point?: definitions["Point"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Point.id"];
          longitude?: parameters["rowFilter.Point.longitude"];
          latitude?: parameters["rowFilter.Point.latitude"];
          floor_id?: parameters["rowFilter.Point.floor_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Point.id"];
          longitude?: parameters["rowFilter.Point.longitude"];
          latitude?: parameters["rowFilter.Point.latitude"];
          floor_id?: parameters["rowFilter.Point.floor_id"];
        };
        body: {
          /** Point */
          Point?: definitions["Point"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/_prisma_migrations": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter._prisma_migrations.id"];
          checksum?: parameters["rowFilter._prisma_migrations.checksum"];
          finished_at?: parameters["rowFilter._prisma_migrations.finished_at"];
          migration_name?: parameters["rowFilter._prisma_migrations.migration_name"];
          logs?: parameters["rowFilter._prisma_migrations.logs"];
          rolled_back_at?: parameters["rowFilter._prisma_migrations.rolled_back_at"];
          started_at?: parameters["rowFilter._prisma_migrations.started_at"];
          applied_steps_count?: parameters["rowFilter._prisma_migrations.applied_steps_count"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["_prisma_migrations"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** _prisma_migrations */
          _prisma_migrations?: definitions["_prisma_migrations"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter._prisma_migrations.id"];
          checksum?: parameters["rowFilter._prisma_migrations.checksum"];
          finished_at?: parameters["rowFilter._prisma_migrations.finished_at"];
          migration_name?: parameters["rowFilter._prisma_migrations.migration_name"];
          logs?: parameters["rowFilter._prisma_migrations.logs"];
          rolled_back_at?: parameters["rowFilter._prisma_migrations.rolled_back_at"];
          started_at?: parameters["rowFilter._prisma_migrations.started_at"];
          applied_steps_count?: parameters["rowFilter._prisma_migrations.applied_steps_count"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter._prisma_migrations.id"];
          checksum?: parameters["rowFilter._prisma_migrations.checksum"];
          finished_at?: parameters["rowFilter._prisma_migrations.finished_at"];
          migration_name?: parameters["rowFilter._prisma_migrations.migration_name"];
          logs?: parameters["rowFilter._prisma_migrations.logs"];
          rolled_back_at?: parameters["rowFilter._prisma_migrations.rolled_back_at"];
          started_at?: parameters["rowFilter._prisma_migrations.started_at"];
          applied_steps_count?: parameters["rowFilter._prisma_migrations.applied_steps_count"];
        };
        body: {
          /** _prisma_migrations */
          _prisma_migrations?: definitions["_prisma_migrations"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  Building: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    name: string;
  };
  Floor: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    height: number;
    index: number;
    name: string;
    /**
     * Note:
     * This is a Foreign Key to `Building.id`.<fk table='Building' column='id'/>
     */
    building_id: number;
  };
  Point: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    longitude: number;
    latitude: number;
    /**
     * Note:
     * This is a Foreign Key to `Floor.id`.<fk table='Floor' column='id'/>
     */
    floor_id: number;
  };
  _prisma_migrations: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    checksum: string;
    finished_at?: string;
    migration_name: string;
    logs?: string;
    rolled_back_at?: string;
    started_at: string;
    applied_steps_count: number;
  };
}

export interface parameters {
  /** Preference */
  preferParams: "params=single-object";
  /** Preference */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /** Preference */
  preferCount: "count=none";
  /** Filtering Columns */
  select: string;
  /** On Conflict */
  on_conflict: string;
  /** Ordering */
  order: string;
  /** Limiting and Pagination */
  range: string;
  /** Limiting and Pagination */
  rangeUnit: string;
  /** Limiting and Pagination */
  offset: string;
  /** Limiting and Pagination */
  limit: string;
  /** Building */
  "body.Building": definitions["Building"];
  "rowFilter.Building.id": string;
  "rowFilter.Building.name": string;
  /** Floor */
  "body.Floor": definitions["Floor"];
  "rowFilter.Floor.id": string;
  "rowFilter.Floor.height": string;
  "rowFilter.Floor.index": string;
  "rowFilter.Floor.name": string;
  "rowFilter.Floor.building_id": string;
  /** Point */
  "body.Point": definitions["Point"];
  "rowFilter.Point.id": string;
  "rowFilter.Point.longitude": string;
  "rowFilter.Point.latitude": string;
  "rowFilter.Point.floor_id": string;
  /** _prisma_migrations */
  "body._prisma_migrations": definitions["_prisma_migrations"];
  "rowFilter._prisma_migrations.id": string;
  "rowFilter._prisma_migrations.checksum": string;
  "rowFilter._prisma_migrations.finished_at": string;
  "rowFilter._prisma_migrations.migration_name": string;
  "rowFilter._prisma_migrations.logs": string;
  "rowFilter._prisma_migrations.rolled_back_at": string;
  "rowFilter._prisma_migrations.started_at": string;
  "rowFilter._prisma_migrations.applied_steps_count": string;
}

export interface operations {}

export interface external {}
